-- Create and use IMDB database
CREATE DATABASE IF NOT EXISTS IMDB;
USE IMDB;

-- Create Movie table (Main table)
CREATE TABLE Movie (
    movie_id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(255) NOT NULL,
    release_year INT,
    plot TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create Media table for multiple media per movie
CREATE TABLE Media (
    media_id INT PRIMARY KEY AUTO_INCREMENT,
    movie_id INT,
    media_type ENUM('video', 'image') NOT NULL,
    media_url VARCHAR(255) NOT NULL,
    FOREIGN KEY (movie_id) REFERENCES Movie(movie_id)
);

-- Create Genre table
CREATE TABLE Genre (
    genre_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(50) NOT NULL UNIQUE
);

-- Create Movie_Genre mapping table
CREATE TABLE Movie_Genre (
    movie_id INT,
    genre_id INT,
    PRIMARY KEY (movie_id, genre_id),
    FOREIGN KEY (movie_id) REFERENCES Movie(movie_id),
    FOREIGN KEY (genre_id) REFERENCES Genre(genre_id)
);

-- Create User table for reviews
CREATE TABLE User (
    user_id INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(100) NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create Review table
CREATE TABLE Review (
    review_id INT PRIMARY KEY AUTO_INCREMENT,
    movie_id INT,
    user_id INT,
    rating DECIMAL(3,1) CHECK (rating >= 0 AND rating <= 10),
    review_text TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (movie_id) REFERENCES Movie(movie_id),
    FOREIGN KEY (user_id) REFERENCES User(user_id)
);

-- Create Skill table for artists
CREATE TABLE Skill (
    skill_id INT PRIMARY KEY AUTO_INCREMENT,
    skill_name VARCHAR(50) NOT NULL UNIQUE
);

-- Create Artist table
CREATE TABLE Artist (
    artist_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    birth_date DATE,
    biography TEXT
);

-- Create Artist_Skill mapping table
CREATE TABLE Artist_Skill (
    artist_id INT,
    skill_id INT,
    PRIMARY KEY (artist_id, skill_id),
    FOREIGN KEY (artist_id) REFERENCES Artist(artist_id),
    FOREIGN KEY (skill_id) REFERENCES Skill(skill_id)
);

-- Create Role table
CREATE TABLE Role (
    role_id INT PRIMARY KEY AUTO_INCREMENT,
    role_name VARCHAR(50) NOT NULL UNIQUE
);

-- Create Movie_Artist_Role mapping table
CREATE TABLE Movie_Artist_Role (
    movie_id INT,
    artist_id INT,
    role_id INT,
    character_name VARCHAR(100),
    PRIMARY KEY (movie_id, artist_id, role_id),
    FOREIGN KEY (movie_id) REFERENCES Movie(movie_id),
    FOREIGN KEY (artist_id) REFERENCES Artist(artist_id),
    FOREIGN KEY (role_id) REFERENCES Role(role_id)
);

-- Insert sample genres
INSERT INTO Genre (name) VALUES 
('Action'), ('Comedy'), ('Drama'), ('Sci-Fi');

-- Insert sample skills
INSERT INTO Skill (skill_name) VALUES 
('Acting'), ('Directing'), ('Singing'), ('Stunts');

-- Insert sample roles
INSERT INTO Role (role_name) VALUES 
('Actor'), ('Director'), ('Producer'), ('Musician');

-- Insert sample artists
INSERT INTO Artist (name, birth_date) VALUES 
('John Doe', '1980-01-15'),
('Jane Smith', '1985-03-22');

-- Insert sample movies
INSERT INTO Movie (title, release_year, plot) VALUES 
('The Great Adventure', 2023, 'An epic journey'),
('Comedy Night', 2023, 'A hilarious story');

-- Insert sample users
INSERT INTO User (username, email) VALUES 
('moviefan1', 'fan1@example.com'),
('critic2', 'critic2@example.com');

-- Insert sample media
INSERT INTO Media (movie_id, media_type, media_url) VALUES 
(1, 'image', 'great_adventure_poster.jpg'),
(1, 'video', 'great_adventure_trailer.mp4');

-- Link artists with skills
INSERT INTO Artist_Skill (artist_id, skill_id) VALUES 
(1, 1), -- John Doe - Acting
(1, 4), -- John Doe - Stunts
(2, 1), -- Jane Smith - Acting
(2, 2); -- Jane Smith - Directing

-- Link movies with genres
INSERT INTO Movie_Genre (movie_id, genre_id) VALUES 
(1, 1), -- Great Adventure - Action
(1, 3), -- Great Adventure - Drama
(2, 2); -- Comedy Night - Comedy

-- Add artist roles in movies
INSERT INTO Movie_Artist_Role (movie_id, artist_id, role_id, character_name) VALUES 
(1, 1, 1, 'Hero'), -- John Doe as Actor
(1, 2, 2, NULL),   -- Jane Smith as Director
(2, 2, 1, 'Lead'); -- Jane Smith as Actor

-- Add reviews
INSERT INTO Review (movie_id, user_id, rating, review_text) VALUES 
(1, 1, 8.5, 'Great movie with amazing action scenes!'),
(1, 2, 7.5, 'Good plot but could be better'),
(2, 1, 9.0, 'Hilarious comedy, loved it!');